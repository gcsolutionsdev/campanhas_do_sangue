---
const { src, config } = Astro.props;
import "../styles/global.css";
const canShare = typeof navigator !== "undefined" && navigator.share;
---

<!-- Fontes -->
<link
  href="https://fonts.googleapis.com/css2?family=Epilogue:ital,wght@0,600;1,600&family=Josefin+Sans&family=Poppins&display=swap"
  rel="stylesheet"
/>
<link
  href="https://fonts.googleapis.com/css2?family=Anton&display=swap"
  rel="stylesheet"
/>

<section class="action-panel">
  <div class="inputs">
    <label for="name">Nome: </label>
    <input type="text" id="name" />
    <label for="doacoes">Quantidade de doaÃ§Ãµes:</label>
    <input type="number" id="doacoes" maxlength="3" />
  </div>

  <div class="buttons">
    <button class="save">Salvar Imagem ðŸ’¾</button>
    <button>
      <label for="imageInput" class="custom-image-upload">
        Selecione uma foto ðŸ“·
      </label>
    </button>

    {canShare && <button class="share">Compartilhar Imagem ðŸ”—</button>}

    <input
      type="file"
      id="imageInput"
      class="imageInput"
      accept="image/*"
      style="display: none;"
    />
  </div>
</section>

<section>
  <canvas
    width="720"
    height="1280"
    id="mainCanvas"
    style={{ width: "100%" }}
    data-src={src}
    data-options={JSON.stringify(config)}></canvas>
</section>

<script defer="">
  const mainCanvas = document.querySelector("canvas#mainCanvas");
  const context = mainCanvas.getContext("2d");

  const options = JSON.parse(mainCanvas.dataset.options ?? "{}");
  const baseImage = new Image();
  baseImage.src = mainCanvas.dataset.src;

  baseImage.addEventListener(
    "load",
    () => {
      context.clearRect(0, 0, mainCanvas.width, mainCanvas.height);
      context.save();
      function draw() {
        context.drawImage(baseImage, 0, 0, mainCanvas.width, mainCanvas.height);
        document.querySelector('input[type="file"]').addEventListener(
          "change",
          ({ target }) => {
            const file = target.files[0];
            const reader = new FileReader();
            const photo = new Image();

            if (!file || !file?.type?.startsWith?.("image/")) {
              return;
            }

            reader.addEventListener(
              "load",
              (e) => {
                photo.src = String(e.target?.result);
                photo.onload = () => {
                  const aspect = mainCanvas.width / mainCanvas.height;
                  const photoAspect = photo.width / photo.height;

                  let drawWidth, drawHeight, offsetX, offsetY;

                  if (aspect > photoAspect) {
                    drawWidth = mainCanvas.width;
                    drawHeight = mainCanvas.width / photoAspect;
                    offsetY = (mainCanvas.height - drawHeight) / 2;
                    offsetX = 0;
                  } else {
                    drawHeight = mainCanvas.height;
                    drawWidth = mainCanvas.height * photoAspect;
                    offsetX = (mainCanvas.width - drawWidth) / 2;
                    offsetY = 0;
                  }
                  const oldWidth = photo.width;
                  photo.width = 1080;
                  photo.height = (1080 / oldWidth) * photo.height;

                  if (photo.height < 1080) {
                    const oldHeight = photo.height;
                    photo.height = 1080;
                    photo.width = (1080 / oldHeight) * photo.width;
                  }
                  context.drawImage(
                    photo,
                    offsetX,
                    offsetY,
                    drawWidth,
                    drawHeight
                  );
                  draw();
                };

                if (file) {
                  reader.readAsDataURL(file);
                }
              },
              false
            );

            reader.readAsDataURL(file);
          },
          {
            once: true,
          }
        );
      }
      draw();
    },
    {
      once: true,
    }
  );

  document.querySelector("button.save").addEventListener("click", () => {
    const a = document.createElement("a");
    a.setAttribute("href", mainCanvas.toDataURL("image/png"));

    a.setAttribute("download", document.querySelector("input").value.trim());

    a.click();
  });
  const inputs = document.querySelectorAll("input");

  // Define as configuraÃ§Ãµes de fonte do input
  function setFontByMaxWidth(maxWidth, fontSize = 1, element) {
    if (options.modifier) {
      element.value = element.value[options.modifier]?.() ?? element.value;

      console.log(options.modifier);
    }
    const widthToCompare = context.measureText(element.value.trim()).width;
    context.fillStyle = options.fillStyle;
    if (widthToCompare == 0) {
      context.font =
        (options.textStyle ? options.textStyle + " " : "") +
        options.defaultFontSize +
        " px " +
        options.font;
      return;
    }
    context.font =
      (options.textStyle ? options.textStyle + " " : "") +
      fontSize +
      "px " +
      options.font;
    if (fontSize >= options.maxCompareFontSize) return;
    if (widthToCompare < maxWidth) {
      setFontByMaxWidth(maxWidth, fontSize + 1, element);
    }
  }

  const textState = {
    nome: { value: "", textY: options.textY, color: options.fillStyle },
    donations: { value: "", textY: options.textY + 60, color: "#e29b00" },
  };

  function drawText(event) {
    if (event.target === inputs[0]) {
      textState.nome.value = event.target.value;
    } else if (event.target === inputs[1]) {
      textState.donations.value = event.target.value;
    }

    context.clearRect(0, 0, mainCanvas.width, mainCanvas.height);
    context.drawImage(baseImage, 0, 0, mainCanvas.width, mainCanvas.height);

    function drawSavedText(text, localOptions, style) {
      context.save();
      context.translate(options.squareX, options.squareY);
      context.textBaseline = options.textBaseline;

      if (context.textBaseline != "middle") {
        setFontByMaxWidth(options.maxFontSize, 1, event.target);
      } else {
        context.font =
          (options.textStyle ? options.textStyle + " " : "") +
          options.defaultFontSize +
          "px " +
          options.font;
      }

      let value = structuredClone(text.value);

      if (localOptions.prefix) {
        value = localOptions.prefix + value;
      }
      if (localOptions.sufix) {
        value += localOptions.sufix;
      }

      if (text === textState.donations) {
        if (+value > 1) {
          value = value + " DoaÃ§Ãµes";
        } else if (+value === 1) {
          value = value + " DoaÃ§Ã£o";
        }
      }

      const width = context.measureText(value.trim()).width;

      if (localOptions.useWidth?.X) {
        localOptions.textX = -width / localOptions.textX;

        // Eixo X da sombra
        if (localOptions.shadow?.textX) {
          // localOptions.shadow.textX = -width / localOptions.shadow.textX;
          context.shadowOffsetX = localOptions.shadow.textX;
        }
      }

      if (localOptions.useWidth?.Y) {
        localOptions.textY = -width / localOptions.textY;

        //  Eixo Y da sombra
        if (localOptions.shadow?.textY) {
          context.shadowOffsetY = localOptions.shadow.textY;
        }
      }

      // Cor da "Sombra"
      if (localOptions.shadow) {
        // context.fillStyle = localOptions.shadow.fillStyle;

        context.shadowColor = localOptions.shadow.fillStyle;
        // context.fillText(value, -width / 2 + 10, text.textY + 10);
      }
      context.shadowBlur = localOptions.blur;

      context.fillStyle = style;
      context.fillText(value.trim(), localOptions.textX, text.textY);
      context.restore();
    }

    drawSavedText(
      textState.nome,
      structuredClone(options),
      textState.nome.color
    );
    drawSavedText(
      textState.donations,
      structuredClone(options),
      textState.donations.color
    );
  }

  inputs.forEach((input) => {
    input.addEventListener("keyup", drawText);
  });
</script>
<p>
  Feito com carinho por <a href="https://github.com/Carloss-Dev" target="_blank"
    >Carlos Cavalcante</a
  >
</p>
